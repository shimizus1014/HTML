★ CSS（Cascading Style Sheets）［教材：補足資料］
￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣
（従来）～ HTML4.01
  多くのWebページがレイアウトや装飾をテーブルや要素の属性で行っていた。
（現在）HTML５～
  見た目を制御する属性は（一部を除き）すべて廃止され、CSSで定義するように統一
  されている。
  
メモ）CSS自体は HTML５とは異なる仕様であるため、HTML4.01とCSSを組み合わせても
      問題は生じない！

【副教材】
・ HTMLクイックリファレンス（http://www.htmq.com/）
   → HTMLの基本から、リファレンスや色見本までサンプルが豊富
   → メニュー「CSSリファレンス（目的別）」から検索

---

【CSSの基本】
［体験］CSSの内部参照
・ ファイル名 ：sample21_css.html ← ブラウザで表示確認
・ タ イ ト ル：CSS３の演習
・ head要素のstyle要素内に「CSSの宣言」を記述する。
   <style>
     h1 { color: red }   ← ｛ ｝内の記述を「スタイル宣言」と呼ぶ。
   </style>
・ body要素
   見  出  し：はじめてのCSS３
   段      落：見出し１が赤く表示されています。

［解説］
・ style要素を使ってHTML文書にCSSを記述する場合、その内容をHTMLのコメントで
   括ることもできる。
   → CSSの部分がHTMLのコメントになり、CSSに対応していないブラウザで
      CSSの宣言が表示されてしまうことを防ぐことができる。
・ スタイル宣言が１行だけの場合は、文末の；（セミコロン）は記述しなくてもよい。
・ CSSを記述できる場所はいくつかある。ここでは、style要素を使って記述している。
・ style要素は、CSSを記述するための要素である。
   → 通常、head要素の内容としてCSSを記述し、ページ全体のスタイルを決める。
・ style要素にtype属性を指定する場合は、type="text/css"と記述する。
   が、HTML５以降では指定しなくても既定で適用される。

【CSSの記述】［補足資料 p.1］
・ h1 { color: red } -（翻訳）→ ① h1要素の、② 色を、③ 赤くする
   ①    ②    ③

   ① セレクタ  ：どの要素の
   ② プロパティ：何を
   ③ 値        ：どうする

・ CSSの宣言は「；（セミコロン）」で区切って、複数記述できる。
 ［例］h1 { color: red; background-color: yellow }
                                               ↑ 最後の「；」は省略可能

【CSSの参照方法】［補足資料 p.2］
① style要素で指定する方法 ： CSSの内部参照
￣￣￣￣￣￣￣￣￣￣￣￣￣￣
   → style要素は、CSSを記述するための要素である。
   → 通常、head要素の内容としてCSSを記述し、ページ全体のスタイルを決める。
    ［例］<style>
            h1 { color: red }
          </style>
   
② style属性で指定する方法 ： CSSのインライン記述
￣￣￣￣￣￣￣￣￣￣￣￣￣￣
   → style属性はグローバル属性なので、すべての要素で使用可能。
   → style属性は適用する要素に直接記述するため、「セレクタ」は不要！
      スタイル宣言を属性値として記述すればよい。
    ［例］<h1 style="color: red">初めてのCSS３</h1>

③ link要素を使用する方法  ： CSSの外部参照
￣￣￣￣￣￣￣￣￣￣￣￣￣￣
・ HTML５以降では、HTML文書と見た目（CSS）をできるだけ分離して管理する方針である。
   → デザインの変更が容易になるため
      ↓
・ HTMLファイルに直接CSSを記述するよりも外部ファイルのほうが管理しやすい。

［実践］
・ CSSファイル ：
   sample22_css.css            cssフォルダを作成し、そこに格納する。
 「@charset "UTF-8";           ← 文字コードの指定
   /* 初めてのCSSファイル */   ← コメント文
   h1 { colr: red }         」

・ HTMLファイル：
   sample22_css.html ← sample21_css.htmlをコピーして、リネームする。
   ・ style要素を削除して、下記のように編集する。
      <link rel="stylesheet" href="css/sample22_css.css" />

［解説］
・ link要素の本来の役目は、外部リソースの参照である。
                           → 読み込めるファイルはCSSファイルとは限らない！
 ［例］<link rel="icon" type="image/png" href="/share/img/favicon.png" />
・ rel属性 ：外部ファイルの種類や関係を指定する。
             → CSSファイルの場合、属性値は「stylesheet」を指定する。
・ href属性：外部ファイルのURLを指定する。

［注意］
１．スタイルの継承
    → 親要素に指定したCSSのスタイルは、子要素に継承される場合がある。

  ［例］body { color: red } の場合、
        子要素であるh1要素やp要素などの内容も赤くなる。
        → 親要素のCSS（文字色、文字サイズ など）を子要素も引き継ぐ可能性がある。

２．スタイルの優先順位
    → よりタグに近い、より後から読み込まれたスタイルが優先される。
       複数箇所でスタイルを指定すると、同じプロパティに異なる値が指定されて
       スタイルが競合することが起こりえる。

  ［例］外部CSSファイルの指定では、文字色を赤色に指定し、 
        style要素による文書単位の指定では、黄色に指定し、 
        style属性による局所的な指定では、  青色に指定した場合
        → より後から読み込まれる値で上書きされるため、文字は青色となる。

---

【CSSのセレクタ】［補足資料 p.1］
→ セレクタはスタイルを適用する要素を指定しているが、単純にすべての要素に
   適用するだけではなく、ある条件に一致する要素や特定の属性をもつ要素にだけ
   適用することもできる。

① 要素型セレクタ
   → 要素を指定すると、ページ内のその要素すべてにスタイルを適用する。

  ［書式］パターン（E：要素）… Ｅ { … }
        ［例］h1要素に適用   … h1 { color: red }

 ☆ セレクタのグループ化
    → 複数の要素に同時に指定する場合、要素名を「，（カンマ）」で区切って
       セレクタをグループ化できる。

  ［書式］パターン（E、F：要素）… Ｅ, Ｆ { … }
        ［例］h1、h2要素に適用  … h1, h2 { color: red }

 ☆ 子孫セレクタ
    → 要素の子要素、さらにその子要素（孫要素）すべてに対してスタイルを適用
       できる。

  ［書式］パターン（E：親要素、F：子要素）… Ｅ Ｆ  { … }
        ［例］p要素の子要素であるspan要素にだけ適用
                                          … p span { color: red }

② クラスセレクタ
→ 適用したい要素に対して、グローバル属性であるclass属性を使い、要素を指定して
   スタイルを適用する。
→ class属性値は、ページ内の複数要素に対して同じ属性値を割り当てることができる。
→ セレクタは、要素名とclass属性値を「．（ドット）」で区切って記述する。

   [書式] パターン（E：要素、class：属性値）… Ｅ.class {…}
     [例] p要素のclass属性値がsampleのすべての要素に適用
                                            … p.sample { color: red }
   [書式] パターン（*：すべての要素、class：属性値）… *.class  {…}
          → 通常、 * は省略する。                  …  .class  {…}
    ［例］class属性値がsampleのすべての要素に適用   …  .sample { color: red }

③ ＩＤセレクタ
→ グローバル属性であるid属性を使い、id属性の属性値と同じ要素だけに適用する。
→ 同じページ内に同じid属性値の要素は存在してはいけないので、このスタイルが
   適用される要素は、そのページに１つだけである。
→ セレクタは、要素名とid属性値を「＃（シャープ）」で区切って記述する。

   [書式] パターン（E：要素、id：属性値）  … Ｅ#ｉｄ   {…｝
    ［例］id属性値がsampleである要素に適用 …   #sample { color: red }
                                              ↑
                   ページ内で、このスタイルが適用される要素は１つなので、
                   通常要素は省略される！

④ 擬似クラス［追加］
   ↑ 要素が特定の状態にあるときだけ、指定したスタイルを適用するセレクタ。

   ・ 擬似クラスには、ユーザーのWebページに対するアクションに応じて、動的に
      変化するクラスがある：ダイナミック擬似クラス
                     → :link、:visited、:hover、:active、:focus

 ［例］未訪問の  ａ要素を赤色にする           … a:link    { color: red }
       訪問済みのａ要素を青色にする           … a:visited { color: blue }
       マウスが乗っている  ａ要素を緑色にする … a:hover   { color: green }
       マウスでクリック中のａ要素を黄色にする … a:active  { color: yellow }

メモ）ａ要素では、擬似クラスを複数組み合わせて指定する場合がある。
      その場合、擬似クラスは後から設定した値が優先される。
      つまり、上記の順番で指定しないと、正しい動作にはならない。

---

【様々なプロパティ】
［体験］
・ CSSファイル：sample23_text.css
  「@charset "UTF-8";
    #test01 { text-align: center }
    #test02 { text-indent: 2em }
    #test03 { font-size: 10px }
    #test04 { font-family: Arial, "ＭＳ 明朝", serif }
    #test05 { color: #ff0000 }
    #test06 { background-color: rgb(0, 255, 0) }      」

・ HTMLファイル：sample23_text.html
→ link要素：<link rel="stylesheet" href="css/sample23_text.css" />
→ body要素：<h1>文字に対するCSS</h1>
             <h2>★ 文字位置</h2>
               <p id="test01">行揃えを設定する（中央揃え）</p>
               <p id="test02">インデント（2em）</p>
             <h2>★ フォント</h2>
               <p id="test03">文字の大きさ（10px）</p>
               <p id="test04">文字の書体（ＭＳ 明朝）</p>
             <h2>★ 色</h2>
               <p id="test05">文字の色（赤：#ff0000）</p>
               <p id="test06">文字の背景色（緑：rgb(0, 255, 0）</p>

［解説］
☆ 文字位置の設定（text-）
   text-align ：行揃え、均等割り付けの指定
   text-indent：インデント幅の指定
   ほかにも、line-height：行の高さ、などがある。
   
   メモ）長さの単位：相対単位）em ← 1 em = １文字分の横幅
                                            ￣￣￣→ 使用フォントサイズに依存
                     絶対単位）in ← 1 in = 2.54 cm
                               px ← 1 px = 1/96 in
                               pt ← 1 pt = 1/72 in

☆ フォントの設定（font-）
   font-size   ：サイズの指定
   font-familiy：種類の指定
   ほかにも、font-style：書体（イタリック体など）、font-weight：太さの指定
   などがある。
   
   メモ）フォントの種類について
      ・ コンピュータによってインストールされているフォントは異なるため、
         複数の候補を記述して、極力イメージに近いフォントをブラウザに選択
         させることができる。
      ・ もし、すべて該当するフォントがないと判断された場合は、ブラウザの
         既定フォントが使用される。
      ・ フォントの種類をキーワードで指定することも可能。
         san-serif：ゴシック系、 serif：明朝系、 cursive：筆記体・草書体
         fantasy  ：装飾的なフォント、         monospace：等幅フォント

☆ 色の設定
   color           ：文字の色の指定
   background-color：背景の色の指定

   メモ）色名で指定：単純な色（140色）
         色の３原色：光の３原色（r：red、g：green、b：blue を使用）
                     16進数表記）#rrggbb、10進数表記）rgb(r, g, b)

             参考）色材の３原色（y：yellow、m：magenta、c：cyan）

---

［追補］
 ☆ ボックスモデル
 → 参考］http://www.htmq.com/csskihon/301.shtml

 ・ CSSでレイアウトする場合、すべての基本が「ボックスモデル」にある。
 → ボックスモデル：要素の内容を囲む区画を決める仕様

 ・ border ：枠線
 ・ padding：内側の余白
 ・ margin ：外側の余白

 ☆ ブロックレベル要素とインライン要素
 → 参考］http://www.htmq.com/htmlkihon/005.shtml

 ※ 要素は、２種類に大別される。

 ① ブロックレベル要素
 → 見出し、段落、表など、文書を構成する基本となる要素
 → １つのブロック（塊）として認識される。
 → ブラウザでは、前後に改行が入る。
 
 ［例］・ h1要素、p要素、table要素、ul要素、ol要素、dl要素、form要素 など。
          見出し  段落   表         リスト                  フォーム

       ・ div要素：区画作成用のタグ

 ② インライン要素
 → 文書の一部として扱われる。
 → ブラウザでは前後に改行が入らず、文書の一部として表示される。

 ［例］・ ａ要素、img要素、br要素 など。
          リンク  画像     改行

       ・ span要素：範囲選択用のタグ

 メモ）div要素、span要素について
    ・ デザイン、レイアウト用のタグ
    ・ 他のタグと異なり、それ自体に特別な役割をもたないタグ

===

